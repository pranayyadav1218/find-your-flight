{"version":3,"sources":["components/AirportSelect.js","custom_hooks/skyscannerAPI_hooks.js","components/FlightInfoForm.js","components/FlightTable.js","components/FlightSearchPage.js","App.js","reportWebVitals.js","index.js"],"names":["AirportSelect","props","value","style","color","className","onChange","places","map","place","index","PlaceId","PlaceName","usePlacesQuery","query","useState","setPlaces","useEffect","options","method","headers","process","a","fetch","URLSearchParams","response","json","Places","placesAPICall","useBrowseDates","responseId","origin","destination","outboundDate","inboundDate","currency","arr","setArr","APICallURL","catch","err","console","log","then","Quotes","Carriers","Currencies","undefined","Dates","OutboundDates","InboundDates","state","length","APICall","useFlights","quotes","carriers","currencies","sortLowToHigh","currentCurrency","flightsArr","setFlightsArr","result","forEach","quote","addToList","OutboundLeg","DepartureDate","substring","InboundLeg","rowObject","OutboundCarrier","OutboundOrigin","OutboundDestination","OutboundDepartureDate","InboundCarrier","InboundOrigin","InboundDestination","InboundDepartureDate","PriceSymbol","Price","Direct","carrier","CarrierId","CarrierIds","Name","OriginId","DestinationId","Symbol","MinPrice","concat","mergeSort","sortFlights","sortBy","half","left","right","push","shift","merge","splice","FlightInfoForm","originQuery","setOriginQuery","showOrigins","setShowOrigins","originPlaces","destinationQuery","setDestinationQuery","destinationPlaces","showDestinations","setShowDestinations","outboundAnytimeChecked","setOutboundAnytimeChecked","inboundAnytimeChecked","setInboundAnytimeChecked","currenciesList","list","setList","currencyAPICall","useCurrenciesList","handleOutboundDate","e","setOutboundDate","target","handleInboundDate","setInboundDate","today","Date","toISOString","preventDefault","setOrigin","setDestination","type","min","max","disabled","id","name","checked","htmlFor","setCurrency","width","maxWidth","cur","Code","onClick","FlightTable","hasInboundFlights","setHasInboundFlights","allFlights","row","handleSortSelect","rowStyle","FlightSearchPage","showTable","setShowTable","setSortLowToHigh","animation","animationDelay","animationFillMode","App","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bba059b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './AirportSelect.css';\r\n\r\n/* \r\n    Component:  AirportSelect\r\n    props: \r\n                value: value set by parent in which to store the result of the select menu\r\n                onChange: function set by parent which activates on a change in the select menu\r\n                places: array of objects representing airports retrieved from a query to the Skyscanner API to be used as options in the select menu\r\n    Description:\r\n                React function component that acts as a wrapper for a select menu. \r\n                Populates the menu with options of places (airports) from which a user can select their flight origin/destination.\r\n*/\r\nfunction AirportSelect(props) {\r\n    return (\r\n        <div>\r\n            <label><small>Select Airport{(props.value === \"\" || props.value === \"-\") ? <small style={{color: \"rgb(240, 44, 86)\"}}><i> (required)</i></small> : <></>}: </small></label>\r\n            <select className=\"AirportSelectMenu\" value={props.value} onChange={props.onChange}>\r\n                <option value='-'>-</option>\r\n                {props.places.map((place, index) => {\r\n                        return (<option key={index} value={place.PlaceId}>{place.PlaceName}</option>)\r\n                    })\r\n                }\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AirportSelect\r\n","/*  \r\n    Filename:   skyscannerAPI_hooks.js\r\n    Author:     Pranay Yadav\r\n    Description:\r\n                All custom hooks relating to Skyscanner API calls\r\n                are defined and exported from this file. This allows\r\n                me to reuse hooks throughout function components and\r\n                make my code more organized and readable. When used \r\n                with the useEffect() React hook, I am able to update\r\n                values inside function components in real-time.\r\n\r\n                All custom React hooks must start with 'use', hence \r\n                why these functions are named 'use...()'.\r\n*/\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\n/* \r\n    Function:   usePlacesQuery\r\n    Arguments: \r\n                query:  string representing a query to be made to the Skyscanner API to retrieve a list of airports\r\n    Returns: \r\n                places: array of objects containing the results of the API call or an empty array in case of a failed API call\r\n    Description:\r\n                Custom React hook that returns an array of objects representing places retrieved from an API call to Skyscanner.\r\n                Automatically updates the list whenever the query value changes using the useEffect() React hook.\r\n\r\n*/\r\nfunction usePlacesQuery(query) {\r\n    const [places, setPlaces] = useState([]);\r\n    // Only makes the API call when the value of query changes and when query is not an empty string\r\n    useEffect(() => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"x-rapidapi-key\": process.env.REACT_APP_SKYSCANNER_API_KEY,\r\n                \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\r\n                \"useQueryString\": true\r\n            }\r\n        };\r\n    \r\n        async function placesAPICall() {\r\n            let response = await fetch(\"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/US/USD/en-US/?\" + new URLSearchParams({query: query}), options);\r\n            response = await response.json();\r\n            setPlaces(response.Places);\r\n            \r\n        }\r\n        if (query !== \"\") {\r\n            placesAPICall();\r\n        }\r\n        \r\n    }, [query]); \r\n\r\n    return places;\r\n}\r\n\r\n/* \r\n    Function:   useBrowseDates \r\n    Arguments: \r\n                responseId: string representing the specific information that should be returned (Quotes, Carriers, Places, etc)\r\n                origin: string representing the origin of a flight\r\n                destination: string representing the destination of a flight\r\n                outboundDate: string with value \"anytime\" or in yyyy-mm-dd format representing the departure date of a flight\r\n                inboundDate: string that is empty, \"anytime\", or in yyyy-mm-dd format representing the date of a return flight\r\n                currency: string representing the currency the user wants prices displayed in\r\n    Returns: \r\n                arr: array of objects containing the results of the API call or an empty array in case of a failed or invalid API call\r\n    Description:\r\n                Custom React hook that returns an array of objects representing the \"responseId\" (Quotes, Carriers, Places, etc).\r\n                Automatically updates the list whenever any of the arguments are updated using the React useEffect() hook.\r\n                Makes an API call to Skyscanner to retrieve flight information based on user input.\r\n\r\n*/\r\nfunction useBrowseDates(responseId, origin, destination, outboundDate, inboundDate, currency) {\r\n    const [arr, setArr] = useState([]);\r\n    // Only makes API call when there is a change to any of the function arguments AND when origin && destination are not empty strings\r\n    useEffect(() => {\r\n        const options =  {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"x-rapidapi-key\": process.env.REACT_APP_SKYSCANNER_API_KEY,\r\n                \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\r\n            }\r\n        };\r\n        async function APICall() {\r\n            let APICallURL = `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsedates/v1.0/US/${currency}/en-US/${origin}/${destination}/${outboundDate}/${inboundDate}`;\r\n            //console.log(APICallURL);\r\n            let response = await fetch(APICallURL,\r\n                options).catch(err => {console.log(\"ERROR: \" + err)});\r\n            await response.json().then((response) => {\r\n                // Determine which values to isolate from the response\r\n                switch (responseId) {\r\n                    case \"Quotes\":\r\n                        setArr(response.Quotes);\r\n                        break;\r\n                    case \"Carriers\":\r\n                        setArr(response.Carriers)\r\n                        break;\r\n                    case \"Places\":\r\n                        setArr(response.Places)\r\n                        break;\r\n                    case \"Currencies\":\r\n                        setArr(response.Currencies)\r\n                        break;\r\n                    case \"OutboundDates\":\r\n                        if (response.Dates !== undefined)\r\n                            setArr(response.Dates.OutboundDates);\r\n                        break;\r\n                    case \"InboundDates\":\r\n                        if (response.Dates !== undefined)\r\n                            setArr(response.Dates.InboundDates);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                setArr((state) => {\r\n                    //result = state;\r\n                    return state;\r\n                });\r\n            });\r\n        } \r\n        // Boolean logic to determine whether a valid API call can be made\r\n        let allowAPICall = ((origin !== \"\" && destination !== \"\" ) && (origin !== undefined && destination !== undefined) \r\n                                && (currency !== undefined) && (origin !== \"-\" && destination !== \"-\") \r\n                                && (outboundDate.length === 10 || outboundDate === \"anytime\"));\r\n\r\n        if (allowAPICall) {\r\n            APICall();\r\n        }\r\n        else {\r\n            setArr([]);\r\n        }\r\n\r\n    }, [responseId, origin, destination, outboundDate, inboundDate, currency]);\r\n    \r\n    return arr;\r\n}\r\n\r\n\r\n/* \r\n    Function:   useCurrenciesList \r\n    Arguments:  none\r\n    Returns: \r\n                list: array of objects containing the results of the API call or an empty array in case of a failed or invalid API call\r\n    Description:\r\n                Custom React hook that returns an array of objects representing currencies supported by Skyscanner API.\r\n\r\n*/\r\nfunction useCurrenciesList() {\r\n    const [list, setList] = useState([]);\r\n    useEffect(()=> {\r\n        const options =  {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-key\": process.env.REACT_APP_SKYSCANNER_API_KEY,\r\n                \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\"\r\n            }\r\n        }\r\n      \r\n        async function currencyAPICall() {\r\n            let response = await fetch(\"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/reference/v1.0/currencies\", \r\n               options);\r\n            response = await response.json();\r\n            setList(response.Currencies);\r\n        }\r\n        currencyAPICall();\r\n    }, []);\r\n\r\n    return list;\r\n}\r\n\r\n\r\n/* \r\n    Function:   useFlights\r\n    Arguments: \r\n                quotes: array of objects representing quotes for flights retrieved from a previous Skyscanner API call\r\n                carriers: array of objects representing carriers involved in a flight\r\n                places: array of objects representing places (airports) involved in a flight\r\n                currencies: array of objects representing the currencies in which the price will be displayed\r\n                sortLowToHigh: boolean where true = sort the array in order of lowest to highest price and false = sort the array from highest to lowest price\r\n                outboundDate: string representing the departure date for the outbound flight entered by the user\r\n                inboundDate: string representing the departure date for the return flight entered by the user\r\n                currency: string representign the currency preference entered by the user\r\n    Returns: \r\n                flightsArr: sorted array of objects, each representing a row in the table displaying flight information related to a user's search\r\n    Description:\r\n                Custom React hook that returns an array of objects representing flight information to be displayed.\r\n                Each object in the array returned represents a row in the table that displays all flights relating to a user's search.\r\n                Automatically updates the list whenever any of the arguments are updated using the React useEffect() hook.\r\n\r\n*/\r\nfunction useFlights(quotes, carriers, places, currencies, sortLowToHigh, outboundDate, inboundDate, currentCurrency) {\r\n    const [flightsArr, setFlightsArr] = useState([]);\r\n    useEffect(() => {\r\n        if (quotes !== undefined) {\r\n\r\n            let result = [];\r\n            setFlightsArr(result); // updates flightsArr state at least once\r\n\r\n            quotes.forEach(quote => {\r\n\r\n                let addToList = true; // determines whether the entry meets the criteria to be added to the final list that will be displayed\r\n\r\n                // if the current quote's departure dates do not match the dates entered by the user, this quote will not be added to the list\r\n                if (quote.OutboundLeg !== undefined && outboundDate !== \"anytime\") { \r\n                    addToList = addToList && (quote.OutboundLeg.DepartureDate.substring(0, 10) === outboundDate);\r\n                }\r\n                if (quote.InboundLeg !== undefined && (inboundDate !== \"\" && inboundDate !== \"anytime\")) {\r\n                    addToList = addToList && (quote.InboundLeg.DepartureDate.substring(0, 10) === inboundDate);\r\n                }\r\n\r\n                if (addToList) {\r\n                    // Row object with all data fields need to display to user\r\n                    let rowObject = {\r\n                        OutboundCarrier: \"\",\r\n                        OutboundOrigin: \"\",\r\n                        OutboundDestination: \"\",\r\n                        OutboundDepartureDate: \"\",\r\n                        InboundCarrier: \"\",\r\n                        InboundOrigin: \"\",\r\n                        InboundDestination: \"\", \r\n                        InboundDepartureDate: \"\",\r\n                        PriceSymbol: \"\",\r\n                        Price: \"\",\r\n                        Direct: \"\",\r\n                    };\r\n\r\n                    // Set all carrier names\r\n                    if (carriers !== undefined) {\r\n                        carriers.forEach(carrier => {\r\n                            if (carrier.CarrierId === quote.OutboundLeg.CarrierIds[0]) {\r\n                                rowObject.OutboundCarrier = carrier.Name;\r\n                            }\r\n                            if (quote.InboundLeg !== undefined) {\r\n                                if (carrier.CarrierId === quote.InboundLeg.CarrierIds[0]) {\r\n                                    rowObject.InboundCarrier = carrier.Name;\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    // Set all origin/destination names\r\n                    if (places !== undefined) {\r\n                        places.forEach(place => {\r\n                            if (place.PlaceId === quote.OutboundLeg.OriginId) {\r\n                                rowObject.OutboundOrigin = place.Name;\r\n                            }\r\n                            if (place.PlaceId === quote.OutboundLeg.DestinationId) {\r\n                                rowObject.OutboundDestination = place.Name;\r\n                            }\r\n                            if (quote.InboundLeg !== undefined) {\r\n                                if (place.PlaceId === quote.InboundLeg.OriginId) {\r\n                                    rowObject.InboundOrigin = place.Name;\r\n                                }\r\n                                if (place.PlaceId === quote.InboundLeg.DestinationId) {\r\n                                    rowObject.InboundDestination = place.Name;\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    // Set departure dates\r\n                    if (quote.OutboundLeg !== undefined) {\r\n                        rowObject.OutboundDepartureDate = quote.OutboundLeg.DepartureDate.substring(0, 10);\r\n                        rowObject.Direct = (quote.Direct ? \"Yes\" : \"No\");\r\n                    }\r\n                    if (quote.InboundLeg !== undefined) {\r\n                        rowObject.InboundDepartureDate = quote.InboundLeg.DepartureDate.substring(0, 10);\r\n                    }\r\n\r\n                    // Set price symbol and value\r\n                    rowObject.PriceSymbol = ((currencies !== undefined && currencies[0] !== undefined) ? (currencies[0].Symbol.length === 1 ? currencies[0].Symbol : currencies[0].Symbol + \" \" ) : \"\")\r\n                    rowObject.Price = (quote.MinPrice !== undefined ? quote.MinPrice : \"\");\r\n                    // Add row object to array of rows\r\n                    \r\n                    result = result.concat([rowObject]);\r\n                    setFlightsArr(result);\r\n                }\r\n            })\r\n            if (!sortLowToHigh) // By default, the query sorts retrieves the quotes from low prices to high price, so only need to call sortFlights() when we want the opposite order\r\n                setFlightsArr(sortFlights(result, sortLowToHigh));\r\n\r\n        }\r\n        \r\n    }, [quotes, carriers, places, currencies, sortLowToHigh, outboundDate, inboundDate, currentCurrency]);\r\n\r\n    return flightsArr;\r\n}\r\n\r\n/* \r\n    Function:   sortFlights\r\n    Arguments: \r\n                arr: array of row objects to be sorted\r\n                sortLowToHigh: sort from low to high price or vice versa\r\n    Returns: \r\n                result: sorted array of row objects\r\n    Description:\r\n                Functions that performs a mergesort on an array of row objects.\r\n                Called by the useFlights() hook to sort the array row objects before returning the array.\r\n\r\n*/\r\nfunction sortFlights(arr, sortLowToHigh) {\r\n    let sortBy = (sortLowToHigh ? 0 : 1);\r\n    let result = mergeSort(arr, sortBy);\r\n    return result;\r\n}\r\n\r\n// merge function of mergesort\r\nfunction merge(left, right, sortBy) {\r\n    let arr = [];\r\n   \r\n    while (left.length !== 0 && right.length !== 0) {\r\n        switch (sortBy) {\r\n            case 0: // sortLowToHigh is true: pop the row object with smaller price between left[0] and right[0]\r\n                if (left[0].Price < right[0].Price) {\r\n                    \r\n                    arr.push(left.shift());\r\n                }\r\n                else {\r\n                    arr.push(right.shift());\r\n                }\r\n                break;\r\n            case 1: // sortLowToHigh is false: pop the row object with greater price between left[0] and right[0]\r\n                if (left[0].Price > right[0].Price) {\r\n                    arr.push(left.shift());\r\n                }\r\n                else {\r\n                    arr.push(right.shift());\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    let result = [...arr, ...left, ...right];\r\n    \r\n    return result;\r\n}\r\n\r\n// mergesort\r\nfunction mergeSort(arr, sortBy) {\r\n    \r\n    const half = arr.length / 2\r\n    if (arr.length < 2) { // Base case of mergesort\r\n        return arr;\r\n    }\r\n\r\n    const left = arr.splice(0, half); // divide array into two halves\r\n\r\n    return merge(mergeSort(left, sortBy), mergeSort(arr, sortBy), sortBy);\r\n}\r\n\r\nexport {\r\n    usePlacesQuery,\r\n    useBrowseDates,\r\n    useCurrenciesList,\r\n    useFlights\r\n}","import React, { useState } from 'react';\r\nimport AirportSelect from './AirportSelect.js';\r\nimport { useCurrenciesList, usePlacesQuery } from '../custom_hooks/skyscannerAPI_hooks';\r\nimport './FlightInfoForm.css';\r\n\r\n/* \r\n    Component:  FlightInfoForm \r\n    props: \r\n               origin/setOrigin: origin code to be passed to the API call\r\n               destination/setDestination: destination code to be passed to the API call\r\n               outboundDate/setOutboundDate: outbound date to be passed to the API call\r\n               inboundDate/setInboundDate: inbound date to be passed to the API call\r\n               currency/SetCurrency: currency preference to be passed to the API call\r\n               onSubmit: function that handles form submit\r\n    Description:\r\n                React function component that renders a table in which row represents an outbound (and if appropriate return) flight.\r\n                Each row contains the flight carrier name, origin & destination, departure date, whether it is a direct flight or not, and the price.\r\n*/\r\nfunction FlightInfoForm(props) {\r\n    // Values dealing with the origin\r\n    const [originQuery, setOriginQuery] = useState(\"\"); // query to use when fetching origins places\r\n    const [showOrigins, setShowOrigins] = useState(false); // controls when origin select-menu is shown\r\n    const originPlaces = usePlacesQuery(originQuery); // Places list for origins, value is retrieved from a custom hook\r\n    \r\n    // Values dealing with the destination\r\n    const [destinationQuery, setDestinationQuery] = useState(\"\"); // query to use when fetching destinations\r\n    const destinationPlaces = usePlacesQuery(destinationQuery); // Places list for destinations, value retrieved from custom hook\r\n    const [showDestinations, setShowDestinations] = useState(false); // controls when destination select-menu is shown\r\n    \r\n    // Booleans for checkboxes\r\n    const [outboundAnytimeChecked, setOutboundAnytimeChecked] = useState(false);\r\n    const [inboundAnytimeChecked, setInboundAnytimeChecked] = useState(false);\r\n\r\n    // List of all supported currencies retrieved from custom hook\r\n    const currenciesList = useCurrenciesList();\r\n\r\n    // set the value of the origin query entered in by the user and handle whether to render the origin-select component\r\n    function handleOrigin(e) {\r\n        e.preventDefault();\r\n        \r\n        setOriginQuery(e.target.value);\r\n        if (e.target.value !== \"\") {\r\n            setShowOrigins(true);\r\n        }\r\n        else {\r\n            setShowOrigins(false);\r\n        }\r\n    }\r\n    \r\n    // set the value of the destination query entered in by the user and handle whether to render the destination-select component \r\n    function handleDestination(e) {\r\n        e.preventDefault();\r\n      \r\n        setDestinationQuery(e.target.value);\r\n        if (e.target.value !== \"\") {\r\n            setShowDestinations(true);\r\n        }\r\n        else {\r\n            setShowDestinations(false);\r\n        }\r\n    }\r\n\r\n    // set the value of props.origin to the origin selected by the user\r\n    function handleOriginSelect(e) {\r\n        props.setOrigin(e.target.value);\r\n    }\r\n\r\n    // set the value of props.destination to the destinatino selected by the user\r\n    function handleDestinationSelect(e) {\r\n        props.setDestination(e.target.value);\r\n    }\r\n\r\n    // set the value of props.outboundDate to the date selected by the user and handle whether the calander input is disabled or not\r\n    function handleOutboundDate(e) {\r\n        props.setOutboundDate(e.target.value);\r\n        if (e.target.value === \"anytime\") {\r\n            if (outboundAnytimeChecked) { // deselecting \"anytime\" clears the date field\r\n                props.setOutboundDate(\"\");\r\n            }\r\n            setOutboundAnytimeChecked(!outboundAnytimeChecked);\r\n        }\r\n    \r\n    }\r\n\r\n    // set the value of props.inboundDate to the date selected by the user and handle whether the calander input is disabled or not\r\n    function handleInboundDate(e) {\r\n        props.setInboundDate(e.target.value);\r\n        if (e.target.value === \"anytime\") {\r\n            if (inboundAnytimeChecked) { // deselecting \"anytime\" clears the date field\r\n                props.setInboundDate(\"\");\r\n            }\r\n            setInboundAnytimeChecked(!inboundAnytimeChecked);\r\n        }\r\n        \r\n    }\r\n\r\n    function handleCurrency(e) {\r\n        props.setCurrency(e.target.value);\r\n    }\r\n\r\n    // Handle click event for clear button\r\n    function handleClear(e) {\r\n        e.preventDefault();\r\n\r\n        // Reset all values to their defaults\r\n        setOriginQuery(\"\");\r\n        setDestinationQuery(\"\");\r\n        setShowOrigins(false);\r\n        setShowDestinations(false);\r\n        setInboundAnytimeChecked(false);\r\n        setOutboundAnytimeChecked(false);\r\n        props.setOrigin(\"\");\r\n        props.setDestination(\"\");\r\n        props.setOutboundDate(\"\");\r\n        props.setInboundDate(\"\");\r\n        props.setCurrency(\"USD\");\r\n    }\r\n\r\n    // Current date used as a lower bound for date inputs\r\n    let today = new Date().toISOString().substring(0, 10);\r\n\r\n    return (\r\n        <div className=\"FlightInfoForm\">\r\n            <big>Search for Flights:</big>\r\n            <form> \r\n                {/* Section for Origin */}\r\n                <div className=\"InputArea\">\r\n                    <label>\r\n                        <>From: </>\r\n                        <input className=\"InputField\" value={originQuery} onChange={handleOrigin}/>\r\n                    </label>\r\n                    {showOrigins ? <AirportSelect places={originPlaces} value={props.origin} onChange={handleOriginSelect}/> : <></>}\r\n                </div>\r\n                \r\n\r\n                {/* Section for Destination */}\r\n                <div className=\"InputArea\">\r\n                    <label>\r\n                        <>To: </>\r\n                        <input className=\"InputField\" value={destinationQuery} onChange={handleDestination}/>\r\n                    </label>\r\n                    {showDestinations ? <AirportSelect places={destinationPlaces} value={props.destination} onChange={handleDestinationSelect}/> : <></>}\r\n                </div>\r\n\r\n                {/* Outbound Date Section */}\r\n                <div className=\"InputArea\">\r\n                    <label>\r\n                        <>Departure Date{(props.outboundDate === \"\") ? <small style={{color: \"rgb(240, 44, 86)\"}}><i> (required)</i></small> : <></>}: </>\r\n                        <input className=\"InputField\" type=\"date\" value={(props.outboundDate !== \"anytime\") ? props.outboundDate : \"\"} min={today} max={props.inboundDate} onChange={handleOutboundDate} disabled={outboundAnytimeChecked}></input> \r\n                    </label>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"outboundDateAnytime\" name=\"outboundDateAnytime\" value=\"anytime\" onChange={handleOutboundDate} checked={outboundAnytimeChecked}></input>\r\n                        <label htmlFor=\"outboundDateAnytime\"><small> Anytime</small></label>\r\n                    </div>\r\n                </div>\r\n            \r\n                {/* Inbound Date Section */}\r\n                <div className=\"InputArea\">\r\n                    <label>\r\n                        <>Return Date{(props.inboundDate === \"\") ? <small><i> (optional)</i></small> : <></>}: </>\r\n                        <input className=\"InputField\" type=\"date\" value={(props.inboundDate !== \"anytime\") ? props.inboundDate : \"\"} min={(props.outboundDate !== \"anytime\") ? props.outboundDate : today} onChange={handleInboundDate} disabled={inboundAnytimeChecked}></input>\r\n                    </label>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"inboundDateAnytime\" name=\"inboundDateAnytime\" value=\"anytime\" onChange={handleInboundDate} checked={inboundAnytimeChecked}></input>\r\n                        <label htmlFor=\"inboundDateAnytime\"><small> Anytime</small></label>\r\n                    </div>\r\n                </div> \r\n                \r\n\r\n                {/* Currency Select Section */}\r\n                <div className=\"InputArea\">\r\n                    <label> <>Currency: </>\r\n                        <select className=\"InputField\" value={props.currency} onChange={handleCurrency} style={{width: \"80px\", maxWidth: \"50%\"}}>\r\n                            <option>USD</option>\r\n                            {(currenciesList !== undefined) ? currenciesList.map((cur) => {\r\n                                return (<option key={cur.Code} value={cur.Code}>{cur.Code}</option>)\r\n                            }) : <></>}\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n\r\n                \r\n            </form>\r\n            <button className=\"ClearButton\" onClick={handleClear}>Clear</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FlightInfoForm\r\n","import React, { useState, useEffect } from 'react';\r\nimport './FlightTable.css';\r\n/* \r\n    Component:  FlightTable \r\n    props: \r\n                allFlights: array of objects where each object represents a row to be displayed in the table\r\n                sortLowToHigh: boolean that helps control which row is designated as the \"Cheapest Row\"\r\n                handleSortSelect: function that activates when the sorting option is changed, sets the value of sortLowToHigh in the parent component\r\n    Description:\r\n                React function component that renders a table in which row represents an outbound (and if appropriate return) flight.\r\n                Each row contains the flight carrier name, origin & destination, departure date, whether it is a direct flight or not, and the price.\r\n*/\r\nfunction FlightTable(props) {\r\n    const [hasInboundFlights, setHasInboundFlights] = useState(false);\r\n    // Decides whether to display inbound flight information if it exists\r\n    useEffect(() => {\r\n        setHasInboundFlights(false);\r\n        props.allFlights.forEach((row) => {\r\n            if (row.InboundCarrier !== \"\") {\r\n                setHasInboundFlights(true);\r\n            }\r\n            return;\r\n        });\r\n    }, [props.allFlights])\r\n    \r\n    return (\r\n        <div>\r\n            {props.allFlights !== undefined ? \r\n            <>\r\n                <table className='FlightTable'>\r\n                    <thead>\r\n                        <tr className=\"TableHead\">\r\n                            <th className=\"RowItem\">Outbound Flight</th>\r\n                            <th className=\"RowItem\">From</th>\r\n                            <th className=\"RowItem\">To</th>\r\n                            <th className=\"RowItem\">Departure Date</th>\r\n                            {hasInboundFlights ? \r\n                                <>\r\n                                    <th className=\"RowItem\">Return Flight</th>\r\n                                    <th className=\"RowItem\">From</th>\r\n                                    <th className=\"RowItem\">To</th>\r\n                                    <th className=\"RowItem\">Departure Date</th>\r\n                                </>\r\n                            : <></>}\r\n                            <th className=\"RowItem\">Direct Flight?</th>\r\n                            <th className=\"RowItem\">\r\n                                <label>Price </label>\r\n                                <select className=\"sortButton\" onChange={props.handleSortSelect}>\r\n                                    <option value={\"true\"}>Low to High</option>\r\n                                    <option value={\"false\"}>High to Low</option>\r\n                                </select> \r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                                            \r\n                        {props.allFlights.map((row, index) => {\r\n                            let rowStyle = \"TableRow\";\r\n\r\n                            // Highlight the cheapest flight using CSS styling\r\n                            if (props.sortLowToHigh && index === 0) {\r\n                                rowStyle = \"CheapestRow\"\r\n                            }\r\n                            else if (!props.sortLowToHigh && index === (props.allFlights.length-1)) {\r\n                                rowStyle = \"CheapestRow\"\r\n                            }\r\n\r\n                            return (\r\n                                <tr key={index} className={rowStyle}>\r\n                                    \r\n                                    <td className='RowItem'>{row.OutboundCarrier }</td>\r\n                                    <td className='RowItem'>{row.OutboundOrigin }</td>\r\n                                    <td className='RowItem'>{row.OutboundDestination }</td>\r\n                                    <td className='RowItem'>{row.OutboundDepartureDate }</td>\r\n                                \r\n                                    {hasInboundFlights ? \r\n                                        <>\r\n                                            <td className='RowItem'>{row.InboundCarrier }</td>\r\n                                            <td className='RowItem'>{row.InboundOrigin }</td>\r\n                                            <td className='RowItem'>{row.InboundDestination }</td>\r\n                                            <td className='RowItem'>{row.InboundDepartureDate }</td>\r\n                                                \r\n                                        </>\r\n                                    : <></>}\r\n                                    <td className=\"RowItem\">{row.Direct}</td>\r\n                                    <td className='RowItem'>{row.PriceSymbol + \"\" + row.Price}</td>\r\n                                    \r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n            : <p>No Flights Available</p> }\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FlightTable\r\n","import React, { useState, useEffect } from 'react';\r\nimport FlightInfoForm from './FlightInfoForm';\r\nimport FlightTable from './FlightTable';\r\n\r\nimport { useBrowseDates, useFlights } from '../custom_hooks/skyscannerAPI_hooks';\r\n\r\n/* \r\n    Component:  FlightSearchPage \r\n    props:      none\r\n    Description:\r\n                React function component that contains the input form and controls when the table of flights is displayed.\r\n                This component is responsible for storing all input from the user and calling the appropriate custom hooks with that input.\r\n                Children components include <FlightTable/> and <FlightInfoForm/>.\r\n*/\r\nfunction FlightSearchPage() {\r\n    // Query information needed to make a call to the Skyscanner API \r\n    const [origin, setOrigin] = useState(\"\"); // flight origin\r\n    const [destination, setDestination] = useState(\"\"); // flight destination\r\n    const [outboundDate, setOutboundDate] = useState(\"\"); // outbound date\r\n    const [inboundDate, setInboundDate] = useState(\"\"); // inbound date\r\n    const [currency, setCurrency] = useState(\"USD\"); // currency, default will be USD\r\n\r\n    // Boolean to control when the flight information table is rendered\r\n    const [showTable, setShowTable] = useState(false); // table is hidden by default\r\n   \r\n    // Arrays to store info from Skyscanner API call responses. Makes use of custom react hooks.\r\n    const quotes = useBrowseDates(\"Quotes\", origin, destination, outboundDate, inboundDate, currency);\r\n    const carriers = useBrowseDates(\"Carriers\", origin, destination, outboundDate, inboundDate, currency);\r\n    const places = useBrowseDates(\"Places\", origin, destination, outboundDate, inboundDate, currency);\r\n    const currencies = useBrowseDates(\"Currencies\", origin, destination, outboundDate, inboundDate, currency);\r\n        \r\n    // Boolean to control how the results are sorted\r\n    const [sortLowToHigh, setSortLowToHigh] = useState(true); // Flights are sorted from low to high price by default\r\n\r\n    // Sorted array of objects with the information that needs to be displayed (each object represents a quote, or 1 row in the table) \r\n    const allFlights = useFlights(quotes, carriers, places, currencies, sortLowToHigh, outboundDate, inboundDate, currency); // gathers all relevant information into 1 array of objects to make displaying easier\r\n\r\n    // useEffect() hook that updates whether or not to show the table based on changes to the quotes array \r\n    useEffect(() => {\r\n        if (quotes === [] || quotes === undefined || quotes.length === 0 || allFlights === [] || allFlights.length === 0) {\r\n            setShowTable(false);\r\n        }\r\n        else {\r\n            setShowTable(true);\r\n        }\r\n    }, [quotes, allFlights]);\r\n\r\n    // Handles setting value of sortLowToHigh, converting from string representation to boolean value\r\n    function handleSortSelect(e) {\r\n        if (e.target.value === \"true\") {\r\n            setSortLowToHigh(true);\r\n        }\r\n        else if (e.target.value === \"false\") {\r\n            setSortLowToHigh(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FlightInfoForm origin={origin} setOrigin={setOrigin}\r\n                destination={destination} setDestination={setDestination}\r\n                outboundDate={outboundDate} setOutboundDate={setOutboundDate}\r\n                inboundDate={inboundDate} setInboundDate={setInboundDate}\r\n                currency={currency} setCurrency={setCurrency}>\r\n            </FlightInfoForm>\r\n            \r\n            {showTable ? <FlightTable allFlights={allFlights} sortLowToHigh={sortLowToHigh} handleSortSelect={handleSortSelect}></FlightTable> : <></>}\r\n            {(origin.length > 1 && destination.length > 1 && outboundDate !== \"\" && !showTable) ? <p style={{animation: \"fade-in 2s\", animationDelay: \"2s\", animationFillMode: \"backwards\"}}>No Flights Available</p> : <></>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FlightSearchPage\r\n","import './App.css';\nimport FlightSearchPage from './components/FlightSearchPage.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <p>Find <i>your</i> Flight!</p>\n      </div>\n      <div className=\"App-body\">\n        <FlightSearchPage></FlightSearchPage>\n      </div>\n      <div className=\"App-footer\">\n        <p>Made by <a href=\"https://github.com/pyadav1218/\">Pranay Yadav</a> | <a href=\"https://github.com/pyadav1218/find-your-flight\">Project GitHub</a> | Made with <a href=\"https://reactjs.org/\">ReactJS</a>, <a href=\"https://rapidapi.com/skyscanner/api/skyscanner-flight-search\">Skyscanner API</a> | March 2021</p>\n      </div>\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}