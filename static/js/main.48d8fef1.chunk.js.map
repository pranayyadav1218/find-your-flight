{"version":3,"sources":["components/AirportSelect.js","custom_hooks/skyscannerAPI_hooks.js","components/FlightInfoForm.js","components/FlightTable.js","components/FlightSearchPage.js","App.js","reportWebVitals.js","index.js"],"names":["AirportSelect","props","className","value","onChange","places","map","place","index","PlaceId","PlaceName","usePlacesQuery","query","useState","setPlaces","result","useEffect","options","method","headers","process","a","fetch","URLSearchParams","response","json","Places","placesAPICall","useBrowseDates","responseId","origin","destination","outboundDate","inboundDate","currency","arr","setArr","catch","err","console","log","then","Quotes","Carriers","Currencies","undefined","Dates","OutboundDates","InboundDates","state","length","APICall","useFlights","quotes","carriers","currencies","sortLowToHigh","currentCurrency","flightsArr","setFlightsArr","forEach","quote","rowObject","OutboundCarrier","OutboundOrigin","OutboundDestination","OutboundDepartureDate","InboundCarrier","InboundOrigin","InboundDestination","InboundDepartureDate","PriceSymbol","Price","Direct","carrier","CarrierId","OutboundLeg","CarrierIds","Name","InboundLeg","OriginId","DestinationId","DepartureDate","substring","Symbol","MinPrice","concat","mergeSort","sortFlights","sortBy","half","left","right","push","shift","merge","splice","FlightInfoForm","originQuery","setOriginQuery","showOrigins","setShowOrigins","originPlaces","destinationQuery","setDestinationQuery","destinationPlaces","showDestinations","setShowDestinations","currenciesList","list","setList","currencyAPICall","useCurrenciesList","today","Date","toISOString","onSubmit","e","preventDefault","target","setOrigin","setDestination","type","min","max","setOutboundDate","setInboundDate","setCurrency","style","width","maxWidth","cur","Code","onClick","FlightTable","hasInboundFlights","setHasInboundFlights","allFlights","row","handleSortSelect","rowStyle","FlightSearchPage","showTable","setShowTable","setSortLowToHigh","bool","App","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48d8fef1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './AirportSelect.css';\r\n\r\nfunction AirportSelect(props) {\r\n\r\n    \r\n   \r\n    return (\r\n        <div>\r\n            <label><small>Select Airport <i>(required)</i>: </small></label>\r\n            <select className=\"InputField\" value={props.value} onChange={props.onChange}>\r\n                <option value='-'>-</option>\r\n                {props.places.map((place, index) => {\r\n                        return (<option key={index} value={place.PlaceId}>{place.PlaceName}</option>)\r\n                    })\r\n                }\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AirportSelect\r\n","import { useState, useEffect } from 'react';\r\n\r\n\r\n/*  All custom hooks relating to Skyscanner API calls\r\n    are defined and exported from this file. This allows\r\n    me to reuse hooks throughout function components and\r\n    make my code more organized and readable.\r\n\r\n    All custom react hooks must start with 'use', hence \r\n    why these functions are named 'use...()'\r\n*/\r\n\r\nfunction usePlacesQuery(query) {\r\n    const [places, setPlaces] = useState([]);\r\n    let result = places;\r\n    // Only makes the API call when the value of query changes and when query is not an empty string\r\n    useEffect(() => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"x-rapidapi-key\": process.env.REACT_APP_SKYSCANNER_API_KEY,\r\n                \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\r\n                \"useQueryString\": true\r\n            }\r\n        };\r\n    \r\n        async function placesAPICall() {\r\n            let response = await fetch(\"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/US/USD/en-US/?\" + new URLSearchParams({query: query}), options);\r\n            response = await response.json();\r\n            setPlaces(response.Places);\r\n            \r\n        }\r\n        if (query !== \"\") {\r\n            placesAPICall();\r\n        }\r\n        \r\n    }, [query]);\r\n\r\n    return result;\r\n}\r\n\r\nfunction useBrowseDates(responseId, origin, destination, outboundDate, inboundDate, currency) {\r\n    const [arr, setArr] = useState([]);\r\n    // Only makes API call when there is a change to any of the function arguments AND when origin && destination are not empty strings\r\n    useEffect(() => {\r\n        const options =  {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"x-rapidapi-key\": process.env.REACT_APP_SKYSCANNER_API_KEY,\r\n                \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\r\n            }\r\n        };\r\n        async function APICall() {\r\n            let response = await fetch(`https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsedates/v1.0/US/${currency}/en-US/${origin}/${destination}/${outboundDate}/${inboundDate}`,\r\n                options).catch(err => {console.log(\"ERROR: \" + err)});\r\n            await response.json().then((response) => {\r\n                switch (responseId) {\r\n                    case \"Quotes\":\r\n                        setArr(response.Quotes);\r\n                        break;\r\n                    case \"Carriers\":\r\n                        setArr(response.Carriers)\r\n                        break;\r\n                    case \"Places\":\r\n                        setArr(response.Places)\r\n                        break;\r\n                    case \"Currencies\":\r\n                        setArr(response.Currencies)\r\n                        break;\r\n                    case \"OutboundDates\":\r\n                        if (response.Dates !== undefined)\r\n                            setArr(response.Dates.OutboundDates);\r\n                        break;\r\n                    case \"InboundDates\":\r\n                        if (response.Dates !== undefined)\r\n                            setArr(response.Dates.InboundDates);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                setArr((state) => {\r\n                    //result = state;\r\n                    return state;\r\n                });\r\n            });\r\n        } \r\n        let allowAPICall = ((origin !== \"\" && destination !== \"\" ) && (origin !== undefined && destination !== undefined) \r\n                                && (currency !== undefined) && (origin !== \"-\" && destination !== \"-\") \r\n                                && (outboundDate.length === 10 || outboundDate === \"anytime\"));\r\n\r\n        if (allowAPICall) {\r\n            APICall();\r\n        }\r\n        else {\r\n            setArr([]);\r\n        }\r\n\r\n    }, [responseId, origin, destination, outboundDate, inboundDate, currency]);\r\n    \r\n    return arr;\r\n}\r\n\r\nfunction useCurrenciesList() {\r\n    const [list, setList] = useState([]);\r\n    useEffect(()=> {\r\n        const options =  {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-key\": process.env.REACT_APP_SKYSCANNER_API_KEY,\r\n                \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\"\r\n            }\r\n        }\r\n      \r\n        async function currencyAPICall() {\r\n            let response = await fetch(\"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/reference/v1.0/currencies\", \r\n               options);\r\n            response = await response.json();\r\n            setList(response.Currencies);\r\n        }\r\n        currencyAPICall();\r\n    }, []);\r\n\r\n    return list;\r\n}\r\n\r\nfunction useFlights(quotes, carriers, places, currencies, sortLowToHigh, currentCurrency) {\r\n    const [flightsArr, setFlightsArr] = useState([]);\r\n    useEffect(() => {\r\n        if (quotes !== undefined) {\r\n\r\n            let result = [];\r\n\r\n            quotes.forEach(quote => {\r\n                \r\n                let rowObject = {\r\n                    OutboundCarrier: \"\",\r\n                    OutboundOrigin: \"\",\r\n                    OutboundDestination: \"\",\r\n                    OutboundDepartureDate: \"\",\r\n                    InboundCarrier: \"\",\r\n                    InboundOrigin: \"\",\r\n                    InboundDestination: \"\", \r\n                    InboundDepartureDate: \"\",\r\n                    PriceSymbol: \"\",\r\n                    Price: \"\",\r\n                    Direct: \"\",\r\n                };\r\n\r\n\r\n                // Set all carrier names\r\n                if (carriers !== undefined) {\r\n                    carriers.forEach(carrier => {\r\n                        if (carrier.CarrierId === quote.OutboundLeg.CarrierIds[0]) {\r\n                            rowObject.OutboundCarrier = carrier.Name;\r\n                        }\r\n                        if (quote.InboundLeg !== undefined) {\r\n                            if (carrier.CarrierId === quote.InboundLeg.CarrierIds[0]) {\r\n                                rowObject.InboundCarrier = carrier.Name;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Set all origin/destination names\r\n                if (places !== undefined) {\r\n                    places.forEach(place => {\r\n                        if (place.PlaceId === quote.OutboundLeg.OriginId) {\r\n                            rowObject.OutboundOrigin = place.Name;\r\n                        }\r\n                        if (place.PlaceId === quote.OutboundLeg.DestinationId) {\r\n                            rowObject.OutboundDestination = place.Name;\r\n                        }\r\n                        if (quote.InboundLeg !== undefined) {\r\n                            if (place.PlaceId === quote.InboundLeg.OriginId) {\r\n                                rowObject.InboundOrigin = place.Name;\r\n                            }\r\n                            if (place.PlaceId === quote.InboundLeg.DestinationId) {\r\n                                rowObject.InboundDestination = place.Name;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Set departure dates\r\n                if (quote.OutboundLeg !== undefined) {\r\n                    rowObject.OutboundDepartureDate = quote.OutboundLeg.DepartureDate.substring(0, 10);\r\n                    rowObject.Direct = (quote.Direct ? \"Yes\" : \"No\");\r\n                }\r\n                if (quote.InboundLeg !== undefined) {\r\n                    rowObject.InboundDepartureDate = quote.InboundLeg.DepartureDate.substring(0, 10);\r\n                }\r\n\r\n                // Set price symbol and value\r\n                rowObject.PriceSymbol = ((currencies !== undefined && currencies[0] !== undefined) ? (currencies[0].Symbol.length === 1 ? currencies[0].Symbol : currencies[0].Symbol + \" \" ) : \"\")\r\n                rowObject.Price = (quote.MinPrice !== undefined ? quote.MinPrice : \"\");\r\n                // Add row object to array of rows\r\n                \r\n                result = result.concat([rowObject]);\r\n                setFlightsArr(result);\r\n\r\n            })\r\n            if (!sortLowToHigh) // By default, the query sorts retrieves the quotes from low prices to high price, so only need to call sortFlights() when we want the opposite order\r\n                setFlightsArr(sortFlights(result, sortLowToHigh));\r\n\r\n        }\r\n        \r\n        \r\n    }, [quotes, carriers, places, currencies, sortLowToHigh, currentCurrency]);\r\n\r\n    \r\n\r\n    return flightsArr;\r\n}\r\n\r\n// Performs a mergesort on flights array based on Price\r\nfunction sortFlights(arr, sortLowToHigh) {\r\n    let sortBy = (sortLowToHigh ? 0 : 1);\r\n    let result = mergeSort(arr, sortBy);\r\n    return result;\r\n}\r\n\r\n// merge function of mergesort\r\nfunction merge(left, right, sortBy) {\r\n    let arr = [];\r\n   \r\n    while (left.length !== 0 && right.length !== 0) {\r\n        switch (sortBy) {\r\n            case 0: // sortLowToHigh is true: pop the row object with smaller price between left[0] and right[0]\r\n                if (left[0].Price < right[0].Price) {\r\n                    \r\n                    arr.push(left.shift());\r\n                }\r\n                else {\r\n                    arr.push(right.shift());\r\n                }\r\n                break;\r\n            case 1: // sortLowToHigh is false: pop the row object with greater price between left[0] and right[0]\r\n                if (left[0].Price > right[0].Price) {\r\n                    arr.push(left.shift());\r\n                }\r\n                else {\r\n                    arr.push(right.shift());\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    let result = [...arr, ...left, ...right];\r\n    \r\n    return result;\r\n}\r\n\r\n// mergesort\r\nfunction mergeSort(arr, sortBy) {\r\n    \r\n    const half = arr.length / 2\r\n    if (arr.length < 2) { // Base case of mergesort\r\n        return arr;\r\n    }\r\n\r\n    const left = arr.splice(0, half); // divide array into two halves\r\n\r\n    return merge(mergeSort(left, sortBy), mergeSort(arr, sortBy), sortBy);\r\n}\r\n\r\nexport {\r\n    usePlacesQuery,\r\n    useBrowseDates,\r\n    useCurrenciesList,\r\n    useFlights\r\n}","import React, { useState } from 'react';\r\nimport AirportSelect from './AirportSelect.js';\r\nimport { useCurrenciesList, usePlacesQuery } from '../custom_hooks/skyscannerAPI_hooks';\r\nimport './FlightInfoForm.css';\r\n\r\nfunction FlightInfoForm(props) {\r\n    // Values for origin\r\n    const [originQuery, setOriginQuery] = useState(\"\"); // query to use when fetching origins places\r\n    const [showOrigins, setShowOrigins] = useState(false); // controls when origin-select screen is shown\r\n    const originPlaces = usePlacesQuery(originQuery); // Places list for origins, value is retrieved from a custom hook\r\n    //const [originSelected, setOriginSelected] = useState(false); // allows us to capture the user's final choice\r\n    \r\n    const [destinationQuery, setDestinationQuery] = useState(\"\"); // query to use when fetching destinations\r\n    const destinationPlaces = usePlacesQuery(destinationQuery); // Places list for destinations, value retrieved from custom hook\r\n    const [showDestinations, setShowDestinations] = useState(false); // controls when destination-select screen is shown\r\n    //const [destinationSelected, setDestinationSelected] = useState(false); // allows us to capture user's final choice (starts out as true to prevent destination from rendering)\r\n    \r\n    const currenciesList = useCurrenciesList();\r\n\r\n    function handleOrigin(e) {\r\n        e.preventDefault();\r\n        \r\n        setOriginQuery(e.target.value);\r\n        if (e.target.value !== \"\") {\r\n            setShowOrigins(true);\r\n        }\r\n        else {\r\n            setShowOrigins(false);\r\n        }\r\n    }\r\n    \r\n    function handleDestination(e) {\r\n        e.preventDefault();\r\n      \r\n        setDestinationQuery(e.target.value);\r\n        if (e.target.value !== \"\") {\r\n            setShowDestinations(true);\r\n        }\r\n        else {\r\n            setShowDestinations(false);\r\n        }\r\n    }\r\n\r\n\r\n    function handleOriginSelect(e) {\r\n        props.setOrigin(e.target.value);\r\n        /*\r\n        if (e.target.value !== \"-\") {\r\n            setOriginSelected(true);   \r\n        }\r\n        else\r\n            setOriginSelected(false);\r\n            */\r\n    }\r\n    function handleDestinationSelect(e) {\r\n        props.setDestination(e.target.value);\r\n        /*\r\n        if (e.target.value !== \"-\") {\r\n            setDestinationSelected(true);\r\n        }\r\n        else \r\n            setDestinationSelected(false);\r\n            */\r\n    }\r\n\r\n    function handleOutboundDate(e) {\r\n        if (e.target.value !== \"\") {\r\n            props.setOutboundDate(e.target.value);\r\n        }\r\n        else {\r\n            props.setOutboundDate(\"anytime\");\r\n        }\r\n    }\r\n\r\n    function handleInboundDate(e) {\r\n        props.setInboundDate(e.target.value);\r\n    }\r\n\r\n    function handleCurrency(e) {\r\n        props.setCurrency(e.target.value);\r\n    }\r\n\r\n    function handleClear(e) {\r\n        e.preventDefault();\r\n        setOriginQuery(\"\");\r\n        setDestinationQuery(\"\");\r\n        setShowOrigins(false);\r\n        setShowDestinations(false);\r\n        props.setOrigin(\"\");\r\n        props.setDestination(\"\");\r\n        props.setOutboundDate(\"anytime\");\r\n        props.setInboundDate(\"\");\r\n        props.setCurrency(\"USD\");\r\n    }\r\n\r\n    let today = new Date().toISOString().substring(0, 10);\r\n\r\n    return (\r\n        <div className=\"FlightInfoForm\">\r\n            <big>Search for Flights:</big>\r\n            <form onSubmit={props.onSubmit}> \r\n                {/* Section for Origin */}\r\n                <div className=\"InputArea\">\r\n                    <label>\r\n                        From: <input className=\"InputField\" value={originQuery} onChange={handleOrigin}/>\r\n                    </label>\r\n                    {showOrigins ? <AirportSelect places={originPlaces} value={props.origin} onChange={handleOriginSelect}/> : <></>}\r\n                </div>\r\n                \r\n\r\n                {/* Section for Destination */}\r\n                <div className=\"InputArea\">\r\n                    <label>\r\n                        To: <input className=\"InputField\" value={destinationQuery} onChange={handleDestination}/>\r\n                        {showDestinations ? <AirportSelect places={destinationPlaces} value={props.destination} onChange={handleDestinationSelect}/> : <></>}\r\n                    </label>\r\n                </div>\r\n\r\n                {/* Outbound Date Section */}\r\n                <div className=\"InputArea\">\r\n                    <label>\r\n                        Departure Date <small><i>(optional)</i></small>: <input className=\"InputField\" type=\"date\" value={props.outboundDate} min={today} max={props.inboundDate} onChange={handleOutboundDate}></input> \r\n                    </label>\r\n                </div>\r\n\r\n                {/* Inbound Date Section */}\r\n                <div className=\"InputArea\">\r\n                    <label>\r\n                        Return Date <small><i>(optional)</i></small>: <input className=\"InputField\" type=\"date\" value={props.inboundDate} min={props.outboundDate} onChange={handleInboundDate}></input>\r\n                    </label>\r\n                </div>\r\n\r\n                {/* Currency Select Section */}\r\n                <div className=\"InputArea\">\r\n                    <label>Currency: </label>\r\n                    <select className=\"InputField\" value={props.currency} onChange={handleCurrency} style={{width: \"80px\", maxWidth: \"50%\"}}>\r\n                        <option>USD</option>\r\n                        {(currenciesList !== undefined) ? currenciesList.map((cur) => {\r\n                            return (<option key={cur.Code} value={cur.Code}>{cur.Code}</option>)\r\n                        }) : <></>}\r\n                    </select>\r\n                </div>\r\n\r\n                {/* Form Submit Button \r\n                    <button disabled={!(destinationSelected && originSelected)}>Find Flights!</button>\r\n                */}\r\n            </form>\r\n            <button className=\"ClearButton\" onClick={handleClear}>Clear</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FlightInfoForm\r\n","import React, { useState, useEffect } from 'react';\r\nimport './FlightTable.css';\r\n\r\nfunction FlightTable(props) {\r\n    const [hasInboundFlights, setHasInboundFlights] = useState(false);\r\n    useEffect(() => {\r\n        setHasInboundFlights(false);\r\n        props.allFlights.forEach((row) => {\r\n            if (row.InboundCarrier !== \"\") {\r\n                setHasInboundFlights(true);\r\n            }\r\n            return;\r\n        });\r\n    }, [props.allFlights])\r\n    \r\n    return (\r\n        <div>\r\n            {props.allFlights !== undefined ? \r\n            <>\r\n                              \r\n\r\n                <table className='FlightTable'>\r\n                \r\n                        <thead>\r\n                            <tr className=\"TableHead\">\r\n                                <th className=\"RowItem\">Outbound Flight</th>\r\n                                <th className=\"RowItem\">From</th>\r\n                                <th className=\"RowItem\">To</th>\r\n                                <th className=\"RowItem\">Departure Date</th>\r\n                                {hasInboundFlights ? \r\n                                    <>\r\n                                        <th className=\"RowItem\">Return Flight</th>\r\n                                        <th className=\"RowItem\">From</th>\r\n                                        <th className=\"RowItem\">To</th>\r\n                                        <th className=\"RowItem\">Departure Date</th>\r\n                                    </>\r\n                                : <></>}\r\n                                <th className=\"RowItem\">Direct Flight?</th>\r\n                                <th className=\"RowItem\">\r\n                                    <label>Price </label>\r\n                                    <select className=\"sortButton\" onChange={props.handleSortSelect}>\r\n                                        <option value={\"true\"}>Low to High</option>\r\n                                        <option value={\"false\"}>High to Low</option>\r\n                                    </select> \r\n                                </th>\r\n                                \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        \r\n                        \r\n                            {props.allFlights.map((row, index) => {\r\n                                let rowStyle = \"TableRow\";\r\n\r\n                                // Highlight the cheapest flight using CSS styling\r\n                                if (props.sortLowToHigh && index === 0) {\r\n                                    rowStyle = \"CheapestRow\"\r\n                                }\r\n                                else if (!props.sortLowToHigh && index === (props.allFlights.length-1)) {\r\n                                    rowStyle = \"CheapestRow\"\r\n                                }\r\n\r\n                                return (\r\n                                    <tr key={index} className={rowStyle}>\r\n                                        \r\n                                        <td className='RowItem'>{row.OutboundCarrier }</td>\r\n                                        <td className='RowItem'>{row.OutboundOrigin }</td>\r\n                                        <td className='RowItem'>{row.OutboundDestination }</td>\r\n                                        <td className='RowItem'>{row.OutboundDepartureDate }</td>\r\n                                    \r\n                                        \r\n                                        {hasInboundFlights ? \r\n                                            <>\r\n                                                <td className='RowItem'>{row.InboundCarrier }</td>\r\n                                                <td className='RowItem'>{row.InboundOrigin }</td>\r\n                                                <td className='RowItem'>{row.InboundDestination }</td>\r\n                                                <td className='RowItem'>{row.InboundDepartureDate }</td>\r\n                                                    \r\n                                            </>\r\n                                        : <></>}\r\n                                        <td className=\"RowItem\">{row.Direct}</td>\r\n                                        <td className='RowItem'>{row.PriceSymbol + \"\" + row.Price}</td>\r\n                                        \r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                            \r\n                        </tbody>\r\n                    \r\n                </table>\r\n            </>\r\n            : <p>No Flights Available</p> }\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FlightTable\r\n","import React, { useState, useEffect } from 'react';\r\nimport FlightInfoForm from './FlightInfoForm';\r\nimport FlightTable from './FlightTable';\r\n\r\nimport { useBrowseDates, useFlights } from '../custom_hooks/skyscannerAPI_hooks';\r\n\r\nfunction FlightSearchPage() {\r\n    /* Query information needed to make a call to the Skyscanner API */\r\n    const [origin, setOrigin] = useState(\"\");\r\n    const [destination, setDestination] = useState(\"\");\r\n    const [outboundDate, setOutboundDate] = useState(\"anytime\"); // default outbound date will be \"anytime\"\r\n    const [inboundDate, setInboundDate] = useState(\"\");\r\n    const [currency, setCurrency] = useState(\"USD\"); // default currency will be USD\r\n\r\n    /* Arrays to store responses from Skyscanner API */ \r\n    const [showTable, setShowTable] = useState(false);\r\n    const [sortLowToHigh, setSortLowToHigh] = useState(true);\r\n    const quotes = useBrowseDates(\"Quotes\", origin, destination, outboundDate, inboundDate, currency);\r\n    const carriers = useBrowseDates(\"Carriers\", origin, destination, outboundDate, inboundDate, currency);\r\n    const places = useBrowseDates(\"Places\", origin, destination, outboundDate, inboundDate, currency);\r\n    const currencies = useBrowseDates(\"Currencies\", origin, destination, outboundDate, inboundDate, currency);\r\n    //const outboundDates = useBrowseDates(\"OutboundDates\", destination, outboundDate, inboundDate, currency);\r\n    //const inboundDates = useBrowseDates(\"InboundDates\", destination, outboundDate, inboundDate, currency);\r\n    \r\n    /* Custom hook returns a sorted array of objects with the information that \r\n        needs to be displayed (each object represents a quote and 1 row in the table) */\r\n    const allFlights = useFlights(quotes, carriers, places, currencies, sortLowToHigh, currency);\r\n\r\n    /* useEffect that updates whether or not to show the table based on changes to the quotes array */\r\n    useEffect(() => {\r\n        if (quotes === [] || quotes === undefined || quotes.length === 0) {\r\n            setShowTable(false);\r\n        }\r\n        else {\r\n            setShowTable(true);\r\n        }\r\n    }, [quotes]);\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        // Debugging\r\n        //console.log(origin + \" to \" + destination + \" from \" + outboundDate + \" to \" + inboundDate);\r\n        //console.log(quotes);\r\n        //console.log(places);\r\n        //console.log(carriers);\r\n        //console.log(currencies);\r\n        //console.log(outboundDates);\r\n        //console.log(inboundDates);\r\n        \r\n        //\r\n        let bool = (quotes !== [] && quotes !== undefined && carriers !== [] && carriers !== undefined && places !== [] && places !== undefined && quotes.length !== 0);\r\n        setShowTable(bool); \r\n    }\r\n    \r\n    function handleSortSelect(e) {\r\n        if (e.target.value === \"true\") {\r\n            setSortLowToHigh(true);\r\n        }\r\n        else if (e.target.value === \"false\") {\r\n            setSortLowToHigh(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            \r\n            <FlightInfoForm origin={origin} setOrigin={setOrigin}\r\n                destination={destination} setDestination={setDestination}\r\n                outboundDate={outboundDate} setOutboundDate={setOutboundDate}\r\n                inboundDate={inboundDate} setInboundDate={setInboundDate}\r\n                currency={currency} setCurrency={setCurrency}\r\n                onSubmit={handleSubmit}>\r\n            </FlightInfoForm>\r\n            \r\n            {showTable ? <FlightTable allFlights={allFlights} sortLowToHigh={sortLowToHigh} handleSortSelect={handleSortSelect}></FlightTable> : <></>}\r\n            {(origin.length > 1 && destination.length > 1 && !showTable) ? <p>No Flights Available</p> : <></>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FlightSearchPage\r\n","import './App.css';\nimport FlightSearchPage from './components/FlightSearchPage.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <p>Find <i>your</i> Flight!</p>\n      </div>\n      <div className=\"App-body\">\n        <FlightSearchPage></FlightSearchPage>\n      </div>\n      <div className=\"App-footer\">\n        <p><a href=\"https://github.com/pyadav1218/\">Pranay Yadav</a> | <a href=\"https://reactjs.org/\">ReactJS</a>, <a href=\"https://rapidapi.com/skyscanner/api/skyscanner-flight-search\">Skyscanner API</a> | March 2021</p>\n      </div>\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}